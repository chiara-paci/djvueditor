#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


KEYWORDS = {}


class djvused_hiddentextBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(djvused_hiddentextBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class djvused_hiddentextParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=djvused_hiddentextBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(djvused_hiddentextParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _grammar_(self):
        self._list_rule_()
        self._check_eof()

    @graken()
    def _list_rule_(self):

        def block0():
            self._rule_()
        self._positive_closure(block0)

    @graken()
    def _rule_(self):
        self._token('(')
        self._label_()
        self._xmin_()
        self._ymin_()
        self._xmax_()
        self._ymax_()
        self._content_()
        self._token(')')

    @graken()
    def _xmin_(self):
        self._integer_()

    @graken()
    def _ymin_(self):
        self._integer_()

    @graken()
    def _xmax_(self):
        self._integer_()

    @graken()
    def _ymax_(self):
        self._integer_()

    @graken()
    def _integer_(self):
        self._pattern(r'\d+')

    @graken()
    def _label_(self):
        with self._choice():
            with self._option():
                self._token('page')
            with self._option():
                self._token('column')
            with self._option():
                self._token('region')
            with self._option():
                self._token('para')
            with self._option():
                self._token('line')
            with self._option():
                self._token('word')
            with self._option():
                self._token('char')
            self._error('expecting one of: char column line page para region word')

    @graken()
    def _content_(self):
        with self._choice():
            with self._option():
                self._token('"')
                self._etext_()
                self._token('"')
            with self._option():

                def block0():
                    self._rule_()
                self._positive_closure(block0)
            self._error('no available options')

    @graken()
    def _etext_(self):
        self._pattern(r'[^"]*')


class djvused_hiddentextSemantics(object):
    def grammar(self, ast):
        return ast

    def list_rule(self, ast):
        return ast

    def rule(self, ast):
        return ast

    def xmin(self, ast):
        return ast

    def ymin(self, ast):
        return ast

    def xmax(self, ast):
        return ast

    def ymax(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def label(self, ast):
        return ast

    def content(self, ast):
        return ast

    def etext(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = djvused_hiddentextParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, djvused_hiddentextParser, name='djvused_hiddentext')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
